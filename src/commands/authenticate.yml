description: "Authenticate with GCP using a CircleCI OIDC token."
parameters:
  project_id:
    type: env_var_name
    default: GCP_PROJECT_ID
  project_number:
    type: env_var_name
    default: GCP_PROJECT_NUMBER
  workload_identity_pool_id:
    type: env_var_name
    default: GCP_WIP_ID
  workload_identity_pool_provider_id:
    type: env_var_name
    default: GCP_WIP_PROVIDER_ID
  service_account_email:
    type: env_var_name
    default: GCP_SERVICE_ACCOUNT_EMAIL
  gcp_cred_config_file_path:
    type: string
    default: /home/circleci/gcp_cred_config.json
  oidc_token_file_path:
    type: string
    default: /home/circleci/oidc_token.json
steps:
  - run:
      name: "Create credential config using CIRCLE_OIDC_TOKEN"
      command: |
        # Store OIDC token in temp file
        echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>
        # Create a credential configuration for the generated OIDC ID Token
        gcloud iam workload-identity-pools create-cred-config \
            "projects/${<< parameters.project_number >>}/locations/global/workloadIdentityPools/${<< parameters.workload_identity_pool_id >>}/providers/${<< parameters.workload_identity_pool_provider_id >>}"\
            --output-file="<< parameters.gcp_cred_config_file_path >>" \
            --service-account="${<< parameters.service_account_email >>}" \
            --credential-source-file=<< parameters.oidc_token_file_path >>
  - run:
      name: "Authenticate with GCP using the generated credential config"
      command: |
        # Configure gcloud to leverage the generated credential configuration
        gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"
        # Configure ADC
        echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a $BASH_ENV
 